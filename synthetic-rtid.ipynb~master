{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# imports\n",
    "\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# inheirited class of a reinforcement learning\n",
    "class RL(object): \n",
    "    def __init__(self, true_distributions, treatment_costs, classification_acc=0.9, epsilon = 0.1):  \n",
    "        self.true_dist = true_distributions\n",
    "        self.treatment_costs = treatment_costs\n",
    "        self.epsilon = epsilon\n",
    "        self.classification_acc = classification_acc\n",
    "        \n",
    "        self.customers = [c for c in true_distributions]\n",
    "        self.treatments = [t for t in treatment_costs]\n",
    "        self.customer_freq = [self.true_dist[customer][\"frequency\"] for customer in self.true_dist]\n",
    "        \n",
    "        self.count = None\n",
    "        plt.style.use(\"ggplot\")\n",
    "        \n",
    "    \n",
    "    def customer_arrival(self):\n",
    "        \"\"\"Selects a customer to arrive based on their weighted proabilities\n",
    "        \n",
    "        Returns:\n",
    "            str: name of the selected customer\n",
    "        \"\"\"\n",
    "        return random.choices(self.customers, weights=self.customer_freq)[0]\n",
    "\n",
    "    \n",
    "    def classify_customer(self, customer):\n",
    "        \"\"\"Classifies the known customer given an classification accuracy\n",
    "        \n",
    "        Args:\n",
    "            customer(str): the name of the known customer\n",
    "        \n",
    "        Returns:\n",
    "            str: The name of the customer the algorithm thinks it is\n",
    "        \"\"\"\n",
    "        if self.classification_acc > stats.uniform.rvs():\n",
    "            return customer\n",
    "        else:\n",
    "            remaining_customers = self.customers.copy()\n",
    "            remaining_customers.remove(customer)\n",
    "            return random.choice(remaining_customers)\n",
    "        \n",
    "    \n",
    "    def reward(self, customer, treatment):\n",
    "        \"\"\"Returns the binary reward drawn from a known distribution \n",
    "            based on customer and action\n",
    "               \n",
    "        Args:\n",
    "            customer (str): the customer type\n",
    "            treatment (str): the treatment name\n",
    "            \n",
    "        Returns:\n",
    "            str: the result of applying the treatment to this customer\n",
    "        \"\"\"\n",
    "        bernoulli_prob = self.true_dist[customer][\"treatments\"][treatment]\n",
    "        return stats.bernoulli.rvs(p=bernoulli_prob)\n",
    "    \n",
    "    def customer_sim(self):\n",
    "        \"\"\"Simulates the arrival, classification, treatment application, \n",
    "           and reward of a single customer.\n",
    "           \n",
    "           Uses the sample average method to calculate the reward.\n",
    "              \n",
    "        Returns:\n",
    "            listof(str, str, str, int): real customer type, classified customer type,\n",
    "                                        the treatement applied, and conversion result\n",
    "        \"\"\"\n",
    "        customer = self.customer_arrival()\n",
    "        classification = self.classify_customer(customer)\n",
    "        treatment = self.action()\n",
    "        reward = self.reward(classification, treatment)\n",
    "        return [customer, classification, treatment, reward]\n",
    "    \n",
    "    \n",
    "    \n",
    "    def visualize_reward(self):\n",
    "        \"\"\"Plots a linear relationship between trail count and expected reward\n",
    "        \n",
    "        Returns:\n",
    "            plot (plt): A graph of time vs. expected reward\n",
    "        \"\"\"\n",
    "        if self.count == None:\n",
    "            raise ValueError(\"The simulation must be run before visualizing!\")\n",
    "        \n",
    "        expected_reward = 0\n",
    "        reward_history = []\n",
    "        \n",
    "        for i, r in enumerate(self.history[\"conversion\"]):\n",
    "            expected_reward = expected_reward + ((1/(i+1)) * (r - expected_reward))\n",
    "            reward_history.append(expected_reward)\n",
    "        \n",
    "        self.reward_history = reward_history\n",
    "        plt.title(\"Expected Reward of K-Arm Bandit\")\n",
    "        plt.plot(range(0, len(reward_history)), reward_history)\n",
    "        plt.ylabel(\"Conversion Rate\")\n",
    "        plt.xlabel(\"Number of customers\")\n",
    "        return plt.show()\n",
    "    \n",
    "    \n",
    "    def visualize_known(self):\n",
    "        \"\"\"Plots the known conversion probability of each treatment for each customer\n",
    "            \n",
    "        Returns:\n",
    "            plt: A bar chart of conversion probability by treatement and customer\n",
    "        \"\"\"\n",
    "        data = []\n",
    "        for customer in self.true_dist:\n",
    "            for t in self.true_dist[customer][\"treatments\"]:\n",
    "                data.append([customer, t, self.true_dist[customer][\"treatments\"][t]])\n",
    "        data = pd.DataFrame(data, columns=[\"customer\", \"treatment\", \"true_dist\"])\n",
    "        plt.figure(figsize=(6,4))\n",
    "        ax = sns.barplot(x=\"treatment\", y=\"true_dist\", hue=\"customer\", data=data)\n",
    "        ax.set_title('Probability of converting for each treatment by customer')\n",
    "        ax.set_ylabel('Bernoulli Probability of Success')\n",
    "        return ax\n",
    "    \n",
    "    \n",
    "    def visualize_treatment_count(self, first_n):\n",
    "        \"\"\"Plots the number of time each treatment has been offered to each customer type\n",
    "        \n",
    "        Returns:\n",
    "            plt: A bar chart of treatment count by treatment and customer\n",
    "        \"\"\"\n",
    "        if self.count == None:\n",
    "            raise ValueError(\"The simulation must be run before visualizing!\")\n",
    "        \n",
    "        return sns.countplot(data=self.history[:first_n], y=\"treatment\", hue=\"customer\")\n",
    "    \n",
    "    \n",
    "    def max_treatment(self, expectations):\n",
    "        \"\"\"Returns a list of the treatments with the highest expectation \n",
    "        \n",
    "        Args:\n",
    "            expectations (dict: [treatment]: expectation): treatments and the expected values\n",
    "\n",
    "        Returns:\n",
    "            (listof str): returns the names of all treatments that have max values\n",
    "        \"\"\"\n",
    "        current_max = -1 # in this example, all rewards > 1\n",
    "        max_treatments = []\n",
    "        for t in expectations:\n",
    "            if expectations[t] > current_max:\n",
    "                current_max = expectations[t]\n",
    "                max_treatments = [t]\n",
    "            elif expectations[t] == current_max:\n",
    "                max_treatments.append(t)\n",
    "        return max_treatments\n",
    "    \n",
    "    \n",
    "    def expectations(self):\n",
    "        \"\"\"\n",
    "        Calculates the expected reward for each treatment\n",
    "        \"\"\"\n",
    "        expectations = {}\n",
    "        for t in self.treatments:\n",
    "            if self.observations[t] <= 0:\n",
    "                expectations[t] = 0\n",
    "            else:\n",
    "                expectations[t] = round(self.rewards[t] / self.observations[t], 4)\n",
    "        return expectations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "class KArm(RL):\n",
    "    def action(self):\n",
    "        \"\"\"Selects an action to take based on epsilon greedy method\n",
    "        \n",
    "        Returns: \n",
    "            str: the name of the selected treatment \n",
    "        \"\"\"\n",
    "        if self.epsilon > stats.uniform.rvs():\n",
    "            return random.choice(self.treatments)\n",
    "        else:\n",
    "            expectations = self.expectations()\n",
    "            return random.choice(self.max_treatment(expectations))\n",
    "        \n",
    "        \n",
    "    \n",
    "    def sim_run(self, count):\n",
    "        \"\"\"Runs customer_sim N times and saves the results and changing expecations\n",
    "        \n",
    "        Modifies:\n",
    "            count (int): changes to the number iterations ran\n",
    "            rewards (dict): sums the total reward seen for each treatment\n",
    "            observations (dict): counts the total number of each treatment seen\n",
    "            history (DataFrame): creates a dataframe of all simulations and results\n",
    "        \"\"\"\n",
    "        self.count = 0\n",
    "        self.rewards = {t: 0 for t in self.treatments}\n",
    "        self.observations = {t: 0 for t in self.treatments}\n",
    "        self.history = []\n",
    "        \n",
    "        for i in range(count):\n",
    "            sim_result = self.customer_sim()\n",
    "            self.history.append(sim_result)\n",
    "            self.count += 1 \n",
    "            self.rewards[sim_result[2]] += sim_result[3]\n",
    "            self.observations[sim_result[2]] += 1\n",
    "        \n",
    "        columns = [\"customer\", \"classification\", \"treatment\", \"conversion\"]\n",
    "        self.history = pd.DataFrame(self.history, columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['frequent', 'infrequent']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cd = {\n",
    "    \"frequent\": {\n",
    "        \"treatments\": {\n",
    "            \"No discount\": 0.01,\n",
    "            \"5% off\": 0.09,\n",
    "            \"Coupon\": 0.06,\n",
    "        },\n",
    "        \"frequency\": 0.2,\n",
    "        \"classification_acc\": 0.8,\n",
    "    },\n",
    "    \n",
    "    \"infrequent\": {\n",
    "        \"treatments\": {\n",
    "            \"No discount\": 0.04,\n",
    "            \"5% off\": 0.06,\n",
    "            \"Coupon\": 0.12,\n",
    "        },\n",
    "        \"frequency\": 0.8,\n",
    "        \"classification_acc\": 0.95,\n",
    "    },\n",
    "}\n",
    "\n",
    "treatment_costs = {\n",
    "    \"No discount\": 0,\n",
    "    \"5% off\": 0.5,\n",
    "    \"Coupon\": 1.2, \n",
    "}\n",
    "\n",
    "r = KArm(cd, treatment_costs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "r.sim_run(10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEaCAYAAADg2nttAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeVxU5f7A8c+ZgWFxRJgBRBQ3cEnNJVGR3BBudVvUn5VWWpnVLU291C33bt7Kslsut9RcMlsss1JvWXYrJHMhCzU0xQ3F0kRZRgVEZDnP74/JyRFlxoVF+L5fr3k555znOef7zJH5znnO8mhKKYUQQghRDkNVByCEEKL6k2QhhBDCJUkWQgghXJJkIYQQwiVJFkIIIVySZCGEEMIlSRai2ujTpw+PPPJIVYdRKZo2bcqLL754xet54403aNSoEQaDgSlTplx5YOKC0tLS0DSNTZs2XXC6NpBkUc0MGzYMTdPKvMxmc1WHVsaLL75I06ZNK217Bw8edPpM/Pz8uOGGG3j//fcrLYbq5MiRI8THxzNhwgR+//13nn766QuWu1ASXr16NWazmTFjxqDrusttPfrooxiNRubPn39VYr9UjRo1cux3g8FAcHAwAwYMYM+ePVUST7NmzcjIyKBz587An/83N2zYUCXxVAZJFtVQz549ycjIcHodOHCgqsOqNj777DMyMjLYunUrAwcO5IEHHuCbb76p6rDKKCoqqtD1HzhwAF3X6devHw0aNHD7B8U777zDgAEDePbZZ3n99dcxGMr/GsjLy+Ojjz5i4sSJLFiwwOX6lVIUFxe7FculmDRpEhkZGfz++++sWrUKm81Gv379rvp23GE0GgkJCcHT07NKtl8VJFlUQyaTiZCQEKdXcHAwADabjbCwMP7+9787ymdmZtKgQQMmTpwIwNq1a9E0jVWrVtG1a1e8vb1p164diYmJTttJS0vjzjvvxN/fn4CAAG666SZ++eUXpzJbtmzhlltuwc/PD7PZTNeuXfnxxx955513ePbZZ/n1118dv/jOdoMUFxczZcoUmjVrhre3N23bti3zi/TXX3/llltuwcfHh7CwMN544w23Px+LxUJISAgRERFMnjwZi8XC119/XSbum266CbPZTFBQEAMHDuTXX38F4PTp03h5efHtt986yvfu3RsvLy8KCgoAKCgowGQyOdb77bff0qdPHywWC/Xq1aN379789NNPTtvUNI3XX3+d++67j3r16nH//fcDsG3bNqKjo/Hy8qJFixZ8/PHHbrVz9erVdO7cGS8vL4KDgxk5ciSnTp0CYMqUKfTs2ROAxo0bo2kaBw8edLnOl156iccee4xFixYxbtw4t+L44IMPaNOmDRMnTiQtLY0tW7Y4LX/rrbfw9vYmISGBjh07YjKZWLt2LZMnT6Z169YsXbqU8PBwfH19ufPOO8nPz+eTTz6hZcuW+Pn5MWjQIPLy8lzGYTabCQkJoUGDBnTr1o0nn3ySvXv3OuqWlpbyyCOPEB4ejo+PD+Hh4UyePNkpaZ+NacWKFbRq1Qqz2UxMTAz79+932tZHH31EeHg43t7e3HjjjezYscNp+bndUCUlJTRr1gyw/9DTNI2IiAi3PttrihLVyoMPPqhiY2PLLfP9998rDw8P9fnnnytd19VNN92kunfvroqLi5VSSn333XcKUBEREWrVqlUqNTVVDR8+XPn6+qojR44opZQ6evSoql+/vnr88cfV9u3b1e7du9WoUaOUxWJRmZmZSimlduzYoXx9fdU999yjkpOT1d69e9WHH36okpKSVEFBgRo3bpxq1KiRysjIUBkZGSovL8/Rhuuvv159/fXX6sCBA+qjjz5S9erVU2+99ZZSSild11WnTp1UZGSk2rRpk/r5559VXFycqlu3rnr44Ycv2u709HQFqPXr1yullCopKVFLly5VgBo/fryj3M6dO1WdOnXUP//5T7Vr1y61fft2ddddd6kWLVqo06dPK6WU6tmzp6NOQUGBMplMKigoSH399ddKKaX+97//KU9PT3Xq1CmllFIrVqxQy5YtU7t371Y7duxQDz/8sAoICFDZ2dmO7QLKYrGoN954Q6Wlpam9e/eqgoICFRoaqv7617+qlJQUlZSUpCIjI5WPj4964YUXLtrWbdu2KaPRqOLj49WuXbvU6tWrVVhYmBo6dKhSSqm8vDy1fPlyBaitW7eqjIwMVVJScsF19e7dWz300EPqiSeeUGaz2dFGd3Xq1EnNnTtXKaXUI488oh599FGn5QsXLlQGg0F16dJFfffddyotLU1lZWWpSZMmqTp16qg77rhDbd++XX333XfKYrGom266Sd12221q27Zt6vvvv1eBgYFq4sSJ5cbQsGFD9fLLLzum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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "r.visualize_reward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Contextual(RL):\n",
    "    def expectations(self):\n",
    "        \"\"\"\n",
    "        Calculates the expected reward for each treatment with each customer type\n",
    "        \"\"\"\n",
    "        expectations = {c : {} for c in self.customers}\n",
    "        for c in self.customers:\n",
    "            for t in self.treatments:\n",
    "                if self.observations[c][t] <= 0:\n",
    "                    expectations[c][t] = 0\n",
    "                else:\n",
    "                    expectations[c][t] = round(self.rewards[c][t] / self.observations[c][t], 4)\n",
    "        return expectations\n",
    "    \n",
    "    def action(self, customer):\n",
    "        \"\"\"Selects an action to take based on epsilon greedy method\n",
    "        \n",
    "        Returns: \n",
    "            str: the name of the selected treatment \n",
    "        \"\"\"\n",
    "        if self.epsilon > stats.uniform.rvs():\n",
    "            return random.choice(self.treatments)\n",
    "        else:\n",
    "            expectations = self.expectations()\n",
    "            return random.choice(self.max_treatment(expectations[customer]))\n",
    "        \n",
    "    def customer_sim(self):\n",
    "        \"\"\"Simulates the arrival, classification, treatment application, \n",
    "           and reward of a single customer.\n",
    "           \n",
    "           Uses the sample average method to calculate the reward.\n",
    "              \n",
    "        Returns:\n",
    "            listof(str, str, str, int): real customer type, classified customer type,\n",
    "                                        the treatement applied, and conversion result\n",
    "        \"\"\"\n",
    "        customer = self.customer_arrival()\n",
    "        classification = self.classify_customer(customer)\n",
    "        treatment = self.action(customer)\n",
    "        reward = self.reward(classification, treatment)\n",
    "        return [customer, classification, treatment, reward]\n",
    "    \n",
    "    def sim_run(self, count):\n",
    "        \"\"\"Runs customer_sim N times and saves the results and changing expecations\n",
    "        \n",
    "        Modifies:\n",
    "            count (int): changes to the number iterations ran\n",
    "            rewards (dict): sums the total reward seen for each treatment\n",
    "            observations (dict): counts the total number of each treatment seen\n",
    "            history (DataFrame): creates a dataframe of all simulations and results\n",
    "        \"\"\"\n",
    "        customer_index = 0\n",
    "        classification_index = 1\n",
    "        treatment_index = 2\n",
    "        reward_index = 3\n",
    "        self.count = 0\n",
    "        self.rewards = {c: {t: 0 for t in self.treatments} for c in self.customers}\n",
    "        self.observations = {c: {t: 0 for t in self.treatments} for c in self.customers}\n",
    "        self.history = []\n",
    "        \n",
    "        for i in range(count):\n",
    "            sim_result = self.customer_sim()\n",
    "            self.history.append(sim_result)\n",
    "            self.count += 1 \n",
    "            self.rewards[sim_result[customer_index]][sim_result[treatment_index]] += sim_result[reward_index]\n",
    "            self.observations[sim_result[customer_index]][sim_result[treatment_index]] += 1\n",
    "        \n",
    "        columns = [\"customer\", \"classification\", \"treatment\", \"conversion\"]\n",
    "        self.history = pd.DataFrame(self.history, columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "cd = {\n",
    "    \"frequent\": {\n",
    "        \"treatments\": {\n",
    "            \"No discount\": 0.01,\n",
    "            \"5% off\": 0.09,\n",
    "            \"Coupon\": 0.06\n",
    "        },\n",
    "        \"frequency\": 0.5,\n",
    "        \"classification_acc\": 0.8,\n",
    "    },\n",
    "    \n",
    "    \"infrequent\": {\n",
    "        \"treatments\": {\n",
    "            \"No discount\": 0.04,\n",
    "            \"5% off\": 0.06,\n",
    "            \"Coupon\": 0.12\n",
    "        },\n",
    "        \"frequency\": 0.5,\n",
    "        \"classification_acc\": 0.95,\n",
    "    },\n",
    "}\n",
    "\n",
    "treatment_costs = {\n",
    "    \"No discount\": 0,\n",
    "    \"5% off\": 0.5,\n",
    "    \"Coupon\": 1.2\n",
    "}\n",
    "\n",
    "r = Contextual(cd, treatment_costs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "r.sim_run(50000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "r.visualize_reward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x124378210>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "r.visualize_treatment_count(first_n=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
